from flask import Flask, request
import json
import requests
from zort_api_utils import search_product_by_sku, format_product_reply
from ocr_utils import extract_text_from_image
import base64

app = Flask(__name__)

# LINE API Credentials
LINE_CHANNEL_ACCESS_TOKEN = "qwzQAyLRTVcsHmcxBUvyrSojIDdxm4tO8Wl/LWEtfUARGP/ntFGSblJL/wM958SoBnyWRFtWK13Un6hcZxXk/BqM8H5FjjJpT40orkVVLJeoKCk6Aebsu8yPT4Yw+9lOV8ZWnklsQ5ueLSsIkNBCowdB04t89/1O/w1cDnyilFU="
LINE_REPLY_ENDPOINT = "https://api.line.me/v2/bot/message/reply"
LINE_CONTENT_ENDPOINT = "https://api-data.line.me/v2/bot/message/{}/content"

# ------------- Intent Classification -------------
def classify_intent(text: str) -> str:
    text = text.lower()
    if "‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤" in text or "quote" in text or "‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤" in text:
        return "quotation"
    elif "‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÑ‡∏´‡∏°" in text or "‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏î" in text or "‡∏™‡∏ï‡πä‡∏≠‡∏Å" in text:
        return "check_stock"
    else:
        return "search_product"

# ------------- ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà LINE -------------
def reply_line(reply_token, message):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}"
    }
    body = {
        "replyToken": reply_token,
        "messages": [{"type": "text", "text": message}]
    }
    requests.post(LINE_REPLY_ENDPOINT, headers=headers, data=json.dumps(body))

# ------------- ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å LINE -------------
def get_line_image(message_id):
    headers = {
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}"
    }
    url = LINE_CONTENT_ENDPOINT.format(message_id)
    response = requests.get(url, headers=headers)
    return response.content

# ------------- Webhook ‡∏´‡∏•‡∏±‡∏Å -------------
@app.route("/webhook", methods=["POST"])
def webhook():
    event_data = request.json
    for event in event_data.get("events", []):
        if event["type"] == "message":
            reply_token = event["replyToken"]

            # --- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            if event["message"]["type"] == "text":
                user_text = event["message"]["text"].strip()
                intent = classify_intent(user_text)

                if intent == "search_product":
                    product = search_product_by_sku(user_text)
                    message = format_product_reply(product) if product else "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏°‡∏≤‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ üôè"

                elif intent == "check_stock":
                    product = search_product_by_sku(user_text)
                    if product:
                        stock = product.get("quantity", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
                        message = f"üîé ‡∏£‡∏´‡∏±‡∏™: {product['code']}\nüì¶ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {product['name']}\nüìä ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {stock} ‡∏ä‡∏¥‡πâ‡∏ô"
                    else:
                        message = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡πà‡∏∞"

                elif intent == "quotation":
                    message = "üìÑ ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏Ñ‡πà‡∏∞ üôè"

                reply_line(reply_token, message)

            # --- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            elif event["message"]["type"] == "image":
                image_id = event["message"]["id"]
                image_bytes = get_line_image(image_id)
                text = extract_text_from_image(image_bytes)
                intent = classify_intent(text)

                # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏î‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                sku = text.strip().split()[0] if text else ""

                if sku:
                    if intent == "search_product":
                        product = search_product_by_sku(sku)
                        message = format_product_reply(product) if product else "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏°‡∏≤‡∏Ñ‡πà‡∏∞"
                    elif intent == "check_stock":
                        product = search_product_by_sku(sku)
                        stock = product.get("quantity", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
                        message = f"üîé ‡∏£‡∏´‡∏±‡∏™: {product['code']}\nüì¶ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {stock} ‡∏ä‡∏¥‡πâ‡∏ô" if product else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡πà‡∏∞"
                    else:
                        message = "üìÑ ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡πà‡∏∞"
                else:
                    message = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞ üò•"

                reply_line(reply_token, message)

    return "OK", 200

