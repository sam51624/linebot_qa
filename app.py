from flask import Flask, request
from answer_question import answer_question
from data_logger import log_to_sheets
from intent_classifier import detect_intent
from ocr_utils import extract_info_from_image_bytes  # ‚Üê ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ
import requests
import os
import threading
from hashlib import md5
import time
import json

app = Flask(__name__)
LINE_CHANNEL_ACCESS_TOKEN = os.environ.get("LINE_CHANNEL_ACCESS_TOKEN")

if not LINE_CHANNEL_ACCESS_TOKEN:
    raise Exception("‚ùå LINE_CHANNEL_ACCESS_TOKEN ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Environment Variable")

chat_history = {}

@app.route("/webhook", methods=["POST"])
def webhook():
    print("üöÄ Webhook Triggered")
    event = request.get_json()
    print("üì• Event payload:", json.dumps(event, indent=2, ensure_ascii=False))

    if event is None or "events" not in event:
        return "Bad Request", 400

    for e in event["events"]:
        if e["type"] != "message":
            continue

        user_id = e["source"]["userId"]
        reply_token = e["replyToken"]

        if e["message"]["type"] == "text":
            user_message = e["message"]["text"]
            print(f"üì© Text from {user_id}: {user_message}")

            if user_id not in chat_history:
                chat_history[user_id] = []
            chat_history[user_id].append(user_message)
            chat_history[user_id] = chat_history[user_id][-5:]

            intent = detect_intent(user_message)
            print("üéØ INTENT:", intent)

            qid = "#Q" + md5((user_id + user_message + str(time.time())).encode()).hexdigest()[:6]

            if intent in ["product_inquiry", "price_inquiry", "check_stock"]:
                reply_text = answer_question(user_message, user_id)
            elif intent == "order_request":
                reply_text = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏•‡∏ô‡πå..."
            elif intent == "general_question":
                reply_text = "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏•‡∏≠‡∏á‡∏ñ‡∏°‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡∏°‡∏≠‡∏•‡∏•‡πå ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô..."
            elif intent == "store_location":
                reply_text = "‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏•‡∏≠‡∏á‡∏ñ‡∏°‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡∏°‡∏≠‡∏•‡∏•‡πå ‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà '‡∏ñ‡∏ô‡∏ô‡∏ô‡∏ß‡∏•‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå ‡∏ã‡∏≠‡∏¢17'..."
            elif intent == "contact_info":
                reply_text = (
                    "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡∏•‡∏≠‡∏á‡∏ñ‡∏°‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á‡∏°‡∏≠‡∏•‡∏•‡πå ‡πÑ‡∏î‡πâ‡∏ó‡∏≤‡∏á:\n"
                    "- ‡πÇ‡∏ó‡∏£: 02-1021772\n- Line ID: @kts-mall\n"
                    "- Email: klongthomshopping@gmail.com"
                )
            elif intent == "delivery_info":
                reply_text = "‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏±‡πà‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ú‡πà‡∏≤‡∏ô Kerry, Flash, ‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡πÑ‡∏ó‡∏¢..."
            elif intent == "payment_method":
                reply_text = "‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô: ‡πÇ‡∏≠‡∏ô/‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏û‡∏¢‡πå/‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î/‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï"
            else:
                reply_text = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä"

            reply_text += f"\n\n{qid}"
            send_reply(reply_token, reply_text)
            log_to_sheets(user_id, user_message, reply_text, intent)

        elif e["message"]["type"] == "image":
            message_id = e["message"]["id"]
            image_url = f"https://api-data.line.me/v2/bot/message/{message_id}/content"
            headers = {"Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}"}
            image_response = requests.get(image_url, headers=headers)

            if image_response.status_code == 200:
                print(f"üñº ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å {user_id} ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏¥‡πà‡∏° OCR ‡∏î‡πâ‡∏ß‡∏¢ Thread...")
                send_reply(reply_token, "üì∑ ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...")

                def process_image_async():
                    try:
                        image_bytes = image_response.content
                        extracted = extract_info_from_image_bytes(image_bytes)
                        print("üîç Extracted OCR info:", extracted)

                        if not extracted:
                            push_message(user_id, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞")
                            return

                        responses = []
                        for item in extracted:
                            query_text = item["sku"] or item["name"]
                            if not query_text:
                                continue
                            answer = answer_question(query_text, user_id)
                            part = "üîç "
                            if item["sku"]:
                                part += f"‡∏£‡∏´‡∏±‡∏™ {item['sku']}"
                            if item["name"]:
                                part += f" | {item['name']}"
                            part += f"\n{answer}"
                            responses.append(part)

                        full_reply = "\n\n".join(responses)
                        push_message(user_id, full_reply)
                        log_to_sheets(user_id, "[‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û]", full_reply, "image_ocr")

                    except Exception as e:
                        print("‚ùå Error in OCR thread:", e)

       # ‡∏ï‡∏≠‡∏ö LINE ‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ           
       threading.Thread(target=process_image_async, args=(event,)).start()
       return "OK", 200

def send_reply(reply_token, message):
    url = "https://api.line.me/v2/bot/message/reply"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}"
    }
    payload = {
        "replyToken": reply_token,
        "messages": [{"type": "text", "text": message}]
    }
    try:
        response = requests.post(url, headers=headers, json=payload)
        print("‚úÖ LINE ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö status code:", response.status_code)
    except Exception as e:
        print("‚ùå Error sending LINE reply:", e)

def push_message(user_id, message):
    url = "https://api.line.me/v2/bot/message/push"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}"
    }
    payload = {
        "to": user_id,
        "messages": [{"type": "text", "text": message}]
    }
    try:
        response = requests.post(url, headers=headers, json=payload)
        print("üì¨ Push Status:", response.status_code)
    except Exception as e:
        print("‚ùå Error sending push:", e)

